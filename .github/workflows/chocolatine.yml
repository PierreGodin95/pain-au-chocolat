name: Chocolatine

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: "git@github.com:EpitechPromo2028/B-DOP-200-BAR-2-1-chocolatine-pierre.godin-launay.git"
  EXECUTABLES: "a.out"  

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: check
        run: |
          rm -f coding-style-reports.log
          check.sh $(pwd) $(pwd)
          cat coding-style-reports.log
      - name: coding style
        run: |
          while IFS= read -r line; do
            file=$(echo "$line" | awk -F ':' '{print $1}')
            line_number=$(echo "$line" | awk -F ':' '{print $2}')
            error=$(echo "$line" | awk -F ':' '{print $3}')
            type=$(echo "$error" | awk '{print $1}')
            code=$(echo "$error" | awk '{print $2}')
            echo "::error file=$file,line=$line_number,title=$type coding style error: $file::$code"
          done < coding-style-reports.log
          if [[ -s coding-style-reports.log ]]; then
            echo "::error 'coding-style-reports.log is not empty'"
            exit 1
          fi


  check_program_compilation:
    runs-on: ubuntu-latest
    needs: check_coding_style
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Make
        timeout-minutes: 2
        run: make 
      - name: Make clean
        run: |
          make clean
          for executable in ${{ env.EXECUTABLES }}; do
            if [[ ! -f "$executable" || ! -x "$executable" ]]; then
              echo ::exit::failure
            fi
          done

  run_tests:
    runs-on: ubuntu-latest
    needs: check_program_compilation
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Make
        timeout-minutes: 2
        run: make run_tests

  mirror:
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Mirroring
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}

          